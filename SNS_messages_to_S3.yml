AWSTemplateFormatVersion : 2010-09-09
Description: >-
  This template creates an SNS topic for publishing the messages(MySNSTopic) with type as SQS.
  SQS queue (MyQueue) is created as an consumer for the messages published by the SNS topic by creating QueuePolicy.
  Whenver the messages are received by SQS an lambda execution(LambdaFunction) will be triggered.
  These lambda executions will then push these messages to the S3 bucket (MyS3Bucket).
  S3 bucket is created with version and lifecycle policies enabled.
  Appropriate permissions(logs , S3-bucket) is created for the lambda execution.
  
Resources:

  #SNS topics for publishing the messages
  MySNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !GetAtt 
            - MyQueue
            - Arn
          Protocol: sqs

  #SQS queue template
  MyQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 120
      
  #SQS queue policy for subscribing to SNS topic
  MyQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - 'sqs:SendMessage'
            Resource: '*'
            Condition:
              ArnEquals:
                'aws:SourceArn': !Ref MySNSTopic
      Queues:
        - !Ref MyQueue
        
  #Resource for creating lambda function along with the code inline
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          
          s3 = boto3.client('s3')
          bucket_name = "ravi-practice-vamstar"
          def my_handler(event, context):
          
            for record in event['Records']:
                print("test")
                payload = record["body"]
                print(str(payload))
                
                response = s3.put_object(
                    Bucket=bucket_name,
                    Key='SNS_Message.txt',
                    Body=str(payload)
                )
           
            return response
      Handler: index.my_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 60
      MemorySize: 512

  #Lambda execution role with all logs and s3 permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: allowS3Actions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: arn:aws:s3:::ravi-practice-vamstar
        - PolicyName: allowSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              Resource: !GetAtt MyQueue.Arn
  
  #Event source mapping for lambda
  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt MyQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn
  
  #Resource for creating S3 bucket  
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Description: Bucket on which we will attach and test bucket policy
    Properties:
      BucketName: "ravi-practice-vamstar"
      LifecycleConfiguration:
        Rules:
          - Id: Rule for log prefix
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
            ExpirationInDays: 365
      VersioningConfiguration:
        Status: Enabled
          
  #Bucket policy for S3 bucket
  MyS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyS3Bucket
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${MyS3Bucket}
              - !Sub arn:aws:s3:::${MyS3Bucket}/*
            Principal:
              AWS:
                - '*'